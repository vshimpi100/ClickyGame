{"version":3,"sources":["components/ImageCard/index.js","components/Wrapper/index.js","Util/shuffle.js","App.js","index.js"],"names":["ImageCard","_this$props","this","props","id","imageSrc","handleClick","react_default","a","createElement","className","onClick","alt","src","React","Component","Wrapper","children","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","App","state","images","clicked","score","jumbleImages","_this","setState","includes","handleLoss","clickedLocal","concat","scoreLocal","alert","componentDidUpdate","winCond","_this2","components_Wrapper","map","image","i","components_ImageCard","key","path","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"2rBAiBeA,0LAbJ,IAAAC,EAC+BC,KAAKC,MAAnCC,EADDH,EACCG,GAAIC,EADLJ,EACKI,SAAUC,EADfL,EACeK,YAEtB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaN,GAAIA,EAAIO,QAAS,WAAKL,EAAYF,KAC5DG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKG,IAAKP,EAAUQ,IAAKR,aAPXS,IAAMC,kBCIfC,MAJf,SAAiBb,GACf,OAAOI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wDAAwDP,EAAMc,kBCJvEC,SAAA,SAAAC,GAMb,IALA,IACEC,EACAC,EAFEC,EAAeH,EAAMI,OAKlB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,ICyDMQ,6MAlEbC,MAAQ,CACNC,SACAC,QAAS,GACTC,MAAO,KAGTC,aAAe,WACbC,EAAKC,SAAShB,EAAQW,OAGxBvB,YAAc,SAAAF,GACZ,GAAI6B,EAAKL,MAAME,QAAQK,SAAS/B,GAC9B6B,EAAKG,iBACA,CACL,IAAMC,EAAeJ,EAAKL,MAAME,QAAQQ,OAAOlC,GACzCmC,EAAaN,EAAKL,MAAMG,MAAQ,EACtCE,EAAKC,SAAS,CACZJ,QAASO,EACTN,MAAOQ,IAETN,EAAKD,mBAITI,WAAa,WACXH,EAAKC,SAAS,CACZH,MAAO,EACPD,QAAS,KAEXU,MAAM,wDACNP,EAAKD,kBAGPS,mBAAqB,WACnB,IAAMC,EAAUT,EAAKL,MAAMC,OAAON,OAC9BU,EAAKL,MAAMG,QAAUW,IACvBT,EAAKC,SAAS,CACZH,MAAO,EACPD,QAAS,KAEXU,MAAM,mDACNP,EAAKD,yFAIA,IAAAW,EAAAzC,KACP,OACEK,EAAAC,EAAAC,cAACmC,EAAD,KACErC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,mBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,sCACAH,EAAAC,EAAAC,cAAA,oBAAYP,KAAK0B,MAAMG,OACvBxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZR,KAAK0B,MAAMC,OAAOgB,IAAI,SAACC,EAAOC,GAAR,OACrBxC,EAAAC,EAAAC,cAACuC,EAAD,CACEC,IAAKF,EACL3C,GAAI0C,EAAM1C,GACVC,SAAUyC,EAAMI,KAChB5C,YAAaqC,EAAKrC,yBA1DdQ,IAAMC,iBCFxBoC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.fd5d305c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nclass ImageCard extends React.Component {\n  render() {\n    const { id, imageSrc, handleClick } = this.props;\n\n    return (\n      <div className=\"card col-4\" id={id} onClick={()=>{handleClick(id)}}>\n        <div className=\"img-container\">\n          <img alt={imageSrc} src={imageSrc}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ImageCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper text-center justify-content-center container\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","export default array => {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n","import React from \"react\";\nimport ImageCard from \"./components/ImageCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport images from \"./images.json\";\nimport \"./App.css\";\nimport shuffle from \"./Util/shuffle\";\n\nclass App extends React.Component {\n  state = {\n    images,\n    clicked: [],\n    score: 0\n  };\n\n  jumbleImages = () => {\n    this.setState(shuffle(images));\n  };\n\n  handleClick = id => {\n    if (this.state.clicked.includes(id)) {\n      this.handleLoss();\n    } else {\n      const clickedLocal = this.state.clicked.concat(id);\n      const scoreLocal = this.state.score + 1;\n      this.setState({\n        clicked: clickedLocal,\n        score: scoreLocal\n      });\n      this.jumbleImages();\n    }\n  };\n\n  handleLoss = () => {\n    this.setState({\n      score: 0,\n      clicked: []\n    });\n    alert(\"Wow, you're pretty stupid huh. That's ok, try again!\");\n    this.jumbleImages();\n  };\n\n  componentDidUpdate = () => {\n    const winCond = this.state.images.length\n    if (this.state.score === winCond) {\n      this.setState({\n        score: 0,\n        clicked: []\n      });\n      alert(\"You won, great job. Really great. So impressed.\");\n      this.jumbleImages();\n    }\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <h1 className=\"title\">Click an Image!</h1>\n        <h2 className=\"subtitle\"> But don't hit the same one twice!</h2>\n        <h3>Score: {this.state.score}</h3>\n        <div className=\"row\">\n          {this.state.images.map((image, i) => (\n            <ImageCard\n              key={i}\n              id={image.id}\n              imageSrc={image.path}\n              handleClick={this.handleClick}\n            />\n          ))}\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}